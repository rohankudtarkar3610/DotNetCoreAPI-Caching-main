// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using DataAccess.Models;
using Microsoft.EntityFrameworkCore;

namespace DataAccess.Data;

public partial class PanditClinicContext : DbContext
{
    public PanditClinicContext(DbContextOptions<PanditClinicContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AdvanceMaster> AdvanceMaster { get; set; }

    public virtual DbSet<EntityMaster> EntityMaster { get; set; }

    public virtual DbSet<InvoiceDetails> InvoiceDetails { get; set; }

    public virtual DbSet<InvoiceHeader> InvoiceHeader { get; set; }

    public virtual DbSet<InvoicePaymentDetails> InvoicePaymentDetails { get; set; }

    public virtual DbSet<ItemMaster> ItemMaster { get; set; }

    public virtual DbSet<PatientMaster> PatientMaster { get; set; }

    public virtual DbSet<PaymentMode> PaymentMode { get; set; }

    public virtual DbSet<RoleMaster> RoleMaster { get; set; }

    public virtual DbSet<UserMaster> UserMaster { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<AdvanceMaster>(entity =>
        {
            entity.Property(e => e.AdvanceAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.AdvanceGivenDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

            entity.HasOne(d => d.Entity).WithMany(p => p.AdvanceMaster)
                .HasForeignKey(d => d.EntityId)
                .HasConstraintName("FK_AdvanceMaster_EntityMaster");

            entity.HasOne(d => d.Patient).WithMany(p => p.AdvanceMaster)
                .HasForeignKey(d => d.PatientId)
                .HasConstraintName("FK_AdvanceMaster_PatientMaster");
        });

        modelBuilder.Entity<EntityMaster>(entity =>
        {
            entity.Property(e => e.Address1)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Address2)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Address3)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ContactNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.EmailId)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Gstno)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("GSTNo");
            entity.Property(e => e.IsGstaplicable).HasColumnName("IsGSTAplicable");
            entity.Property(e => e.Logo).IsUnicode(false);
            entity.Property(e => e.MobileNo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PostalCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.State)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<InvoiceDetails>(entity =>
        {
            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Cgstamount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CGSTAmount");
            entity.Property(e => e.Cgstpercent)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CGSTPercent");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IgstPercent).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.InvoiceNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Narration)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Rate).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Sgstamount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("SGSTAmount");
            entity.Property(e => e.Sgstpercent)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("SGSTPercent");
            entity.Property(e => e.TaxAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Taxpercent)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TAXPercent");
            entity.Property(e => e.TotalAmount).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.InvoiceHeader).WithMany(p => p.InvoiceDetails)
                .HasForeignKey(d => d.InvoiceHeaderId)
                .HasConstraintName("FK_InvoiceDetails_InvoiceHeader");

            entity.HasOne(d => d.Item).WithMany(p => p.InvoiceDetails)
                .HasForeignKey(d => d.ItemId)
                .HasConstraintName("FK_InvoiceDetails_ItemMaster");
        });

        modelBuilder.Entity<InvoiceHeader>(entity =>
        {
            entity.Property(e => e.AdmissionDate).HasColumnType("datetime");
            entity.Property(e => e.AdvanceAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Balance).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DischargeDate).HasColumnType("datetime");
            entity.Property(e => e.DiscountAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.FinalAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Netamount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("NETAmount");
            entity.Property(e => e.Opdipdno)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("OPDIPDNo");
            entity.Property(e => e.PaidAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TotalAmount).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.Entity).WithMany(p => p.InvoiceHeader)
                .HasForeignKey(d => d.EntityId)
                .HasConstraintName("FK_InvoiceHeader_EntityMaster");

            entity.HasOne(d => d.Patient).WithMany(p => p.InvoiceHeader)
                .HasForeignKey(d => d.PatientId)
                .HasConstraintName("FK_InvoiceHeader_PatientMaster");
        });

        modelBuilder.Entity<InvoicePaymentDetails>(entity =>
        {
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Narration)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.PaymentAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.PaymentBank)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PaymentDate).HasColumnType("datetime");
            entity.Property(e => e.PaymentNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Rate).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.Invoice).WithMany(p => p.InvoicePaymentDetails)
                .HasForeignKey(d => d.InvoiceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_InvoicePaymentDetails_InvoiceDetails");

            entity.HasOne(d => d.PaymentMode).WithMany(p => p.InvoicePaymentDetails)
                .HasForeignKey(d => d.PaymentModeId)
                .HasConstraintName("FK_InvoicePaymentDetails_PaymentMode");
        });

        modelBuilder.Entity<ItemMaster>(entity =>
        {
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Gstrate)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("GSTRate");
            entity.Property(e => e.Hsnno)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HSNNo");
            entity.Property(e => e.IsGstaplicable).HasColumnName("IsGSTAplicable");
            entity.Property(e => e.ItemName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Rate).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<PatientMaster>(entity =>
        {
            entity.Property(e => e.Address1)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Address2)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Address3)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ContactNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.District)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EmailId)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.EmergencyEmailId)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.EmergencyMobileNo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.EmergencyPersonName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FirstName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.LastName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.MiddleName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.MobileNo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.PostalCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.State)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PaymentMode>(entity =>
        {
            entity.Property(e => e.AdvanceAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<RoleMaster>(entity =>
        {
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.RoleName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<UserMaster>(entity =>
        {
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Password)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PersonName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UserName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.Role).WithMany(p => p.UserMaster)
                .HasForeignKey(d => d.RoleId)
                .HasConstraintName("FK_UserMaster_RoleMaster");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}